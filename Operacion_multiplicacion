/* Esta es la parte en donde se colocara la parte de multiplicacion de la calculadora */
#include <iostream>
#include <string>

using namespace std;

// Prototipo de función Extracto 
string Extracto(string, int, int = -1);

// Prototipo de función Rango
int* Rango(int, int, int = 1);

// Devuelve verdadero si el caracter es encontrado en una cadena
bool Buscar(char caracter, string cadena)
{
    int i = 0;
    while (cadena[i]) {
    
        if (cadena[i] == caracter)
            return true;

        i++;
    }

    return false;
}

// Devuelve la longitud de caracteres de una cadena
int Longitud(string cadena)
{
    int i = 0;

    while (cadena[i])
        i++;

    return i;
}

// Devuelve la posición de la primera coincidencia de un caracter en una cadena dada.
int Posicion(char caracter, string cadena)
{
    int i = 0;
    while (cadena[i]) {

        if (cadena[i] == caracter)
            return i;

        i++;
    }

    return -1;
}

// Devuelve un arreglo de números dentro de un rango dado.
//   La función devuelve un arreglo de longitud variable
//   (eso significa el asterisco después de int).
int* Rango(int inicio, int fin, int salto) 
{
    int tamanno = 0;

    // El rango será ASCENDENTE
    if (inicio < fin) 
        for (int i = inicio; i <= fin; i+= salto) tamanno++;
    
    // El rango será DESCENDENTE
    else
        for (int i = fin; i >= inicio; i-= salto) tamanno++;

    // Calcula el número de saltos que tendrá el rango
    int* rango = new int[tamanno];
    int indice = 0;

    int valor = inicio;
    while (tamanno-- > 0){
        rango[indice++] = valor;
        
        valor += salto;
    }

    return rango;
}

// Devuelve una subcadena de la cadena original. El índice 
//   se refiere a la posición desde donde se empezará a contar,
//   mientras que la longitud indica el número de caracteres
//   que se tomarán.
string Extracto(string cadena, int indice, int longitud)
{
    string extracto;

    // Si el valor del índice es negativo, calculará desde 
    //   el final de la cadena.
    if (indice < 0)     indice   = Longitud(cadena) + indice;

    // Si la longitud es negativa, se devolverá una subcadena 
    //   hasta el final de la cadena principal
    if (longitud == -1) longitud = Longitud(cadena) - indice;

    // Si el índice al que se refiere contiene un valor \0
    //  se devuelve una cadena vacía.
    if (!cadena[indice]) 
        return "";

    // Se obtiene los índices que se tomarán para formar
    //  la subcadena.
    int* indices = Rango(indice, indice + longitud, 1);

    int i = 0;
    while (longitud) {

        // Si el índice a tomar es mayor a la Longitud de
        //  la cadena original, ya no se pueden tomar más
        //  valores para formar la subcadena.
        if (indices[i] > Longitud(cadena))
            return extracto;
        else
            extracto += cadena[indices[i]];

        i++; longitud--;
    }
    
    return extracto;
}

// Quita el signo menos de un número
string Absoluto(string a)
{
    if (a[0] == '-')
        return Extracto(a, 1);

    return a;
}

// Repite una cadena n-cantidad de veces
string Repetir(string cadena, int nveces)
{
    string repetir = "";
    
    while (nveces-- > 0)
        repetir += cadena;
    
    return repetir;
}

// Aplica la ley de signos. El caracter ^ representa 
//  la operación lógica XOR.
string Signar(string a, string b)
{
    //   + * + = +
    //   + * - = -
    //   - * + = -
    //   - * - = +

    return ((a[0] == '-') ^ (b[0] == '-')) ? "-" : "";
}

// Emula las tablas de la multiplicación, desde 0 * 0 a 9 * 9
string TablaMultiplicacion(char x, char y)
{
    string tabla[10][10] = {
        {"0", "0",  "0",  "0",  "0",  "0",  "0",  "0",  "0",  "0"},
        {"0", "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9"},
        {"0", "2",  "4",  "6",  "8", "10", "12", "14", "16", "18"},
        {"0", "3",  "6",  "9", "12", "15", "18", "21", "24", "27"},
        {"0", "4",  "8", "12", "16", "20", "24", "28", "32", "36"},
        {"0", "5", "10", "15", "20", "25", "30", "35", "40", "45"},
        {"0", "6", "12", "18", "24", "30", "36", "42", "48", "54"},
        {"0", "7", "14", "21", "28", "35", "42", "49", "56", "63"},
        {"0", "8", "16", "24", "32", "40", "48", "56", "64", "72"},
        {"0", "9", "18", "27", "36", "45", "54", "63", "72", "81"}
    };
    
    return tabla[x - 48][y - 48];
}

// Emula la suma de dos números; el primero puede ser un entero de
//  dos digitos máximo y el segundo solo un dígito.
string TablaSuma(string x, char y)
{
    string tabla[82][10] = {
        { "0",  "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9"},
        { "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9", "10"},
        { "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9", "10", "11"},
        { "3",  "4",  "5",  "6",  "7",  "8",  "9", "10", "11", "12"},
        { "4",  "5",  "6",  "7",  "8",  "9", "10", "11", "12", "13"},
        { "5",  "6",  "7",  "8",  "9", "10", "11", "12", "13", "14"},
        { "6",  "7",  "8",  "9", "10", "11", "12", "13", "14", "15"},
        { "7",  "8",  "9", "10", "11", "12", "13", "14", "15", "16"},
        { "8",  "9", "10", "11", "12", "13", "14", "15", "16", "17"},
        { "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"},
        {"10", "11", "12", "13", "14", "15", "16", "17", "18", "19"},
        {"11", "12", "13", "14", "15", "16", "17", "18", "19", "20"},
        {"12", "13", "14", "15", "16", "17", "18", "19", "20", "21"},
        {"13", "14", "15", "16", "17", "18", "19", "20", "21", "22"},
        {"14", "15", "16", "17", "18", "19", "20", "21", "22", "23"},
        {"15", "16", "17", "18", "19", "20", "21", "22", "23", "24"},
        {"16", "17", "18", "19", "20", "21", "22", "23", "24", "25"},
        {"17", "18", "19", "20", "21", "22", "23", "24", "25", "26"},
        {"18", "19", "20", "21", "22", "23", "24", "25", "26", "27"},
        {"19", "20", "21", "22", "23", "24", "25", "26", "27", "28"},
        {"20", "21", "22", "23", "24", "25", "26", "27", "28", "29"},
        {"21", "22", "23", "24", "25", "26", "27", "28", "29", "30"},
        {"22", "23", "24", "25", "26", "27", "28", "29", "30", "31"},
        {"23", "24", "25", "26", "27", "28", "29", "30", "31", "32"},
        {"24", "25", "26", "27", "28", "29", "30", "31", "32", "33"},
        {"25", "26", "27", "28", "29", "30", "31", "32", "33", "34"},
        {"26", "27", "28", "29", "30", "31", "32", "33", "34", "35"},
        {"27", "28", "29", "30", "31", "32", "33", "34", "35", "36"},
        {"28", "29", "30", "31", "32", "33", "34", "35", "36", "37"},
        {"29", "30", "31", "32", "33", "34", "35", "36", "37", "38"},
        {"30", "31", "32", "33", "34", "35", "36", "37", "38", "39"},
        {"31", "32", "33", "34", "35", "36", "37", "38", "39", "40"},
        {"32", "33", "34", "35", "36", "37", "38", "39", "40", "41"},
        {"33", "34", "35", "36", "37", "38", "39", "40", "41", "42"},
        {"34", "35", "36", "37", "38", "39", "40", "41", "42", "43"},
        {"35", "36", "37", "38", "39", "40", "41", "42", "43", "44"},
        {"36", "37", "38", "39", "40", "41", "42", "43", "44", "45"},
        {"37", "38", "39", "40", "41", "42", "43", "44", "45", "46"},
        {"38", "39", "40", "41", "42", "43", "44", "45", "46", "47"},
        {"39", "40", "41", "42", "43", "44", "45", "46", "47", "48"},
        {"40", "41", "42", "43", "44", "45", "46", "47", "48", "49"},
        {"41", "42", "43", "44", "45", "46", "47", "48", "49", "50"},
        {"42", "43", "44", "45", "46", "47", "48", "49", "50", "51"},
        {"43", "44", "45", "46", "47", "48", "49", "50", "51", "52"},
        {"44", "45", "46", "47", "48", "49", "50", "51", "52", "53"},
        {"45", "46", "47", "48", "49", "50", "51", "52", "53", "54"},
        {"46", "47", "48", "49", "50", "51", "52", "53", "54", "55"},
        {"47", "48", "49", "50", "51", "52", "53", "54", "55", "56"},
        {"48", "49", "50", "51", "52", "53", "54", "55", "56", "57"},
        {"49", "50", "51", "52", "53", "54", "55", "56", "57", "58"},
        {"50", "51", "52", "53", "54", "55", "56", "57", "58", "59"},
        {"51", "52", "53", "54", "55", "56", "57", "58", "59", "60"},
        {"52", "53", "54", "55", "56", "57", "58", "59", "60", "61"},
        {"53", "54", "55", "56", "57", "58", "59", "60", "61", "62"},
        {"54", "55", "56", "57", "58", "59", "60", "61", "62", "63"},
        {"55", "56", "57", "58", "59", "60", "61", "62", "63", "64"},
        {"56", "57", "58", "59", "60", "61", "62", "63", "64", "65"},
        {"57", "58", "59", "60", "61", "62", "63", "64", "65", "66"},
        {"58", "59", "60", "61", "62", "63", "64", "65", "66", "67"},
        {"59", "60", "61", "62", "63", "64", "65", "66", "67", "68"},
        {"60", "61", "62", "63", "64", "65", "66", "67", "68", "69"},
        {"61", "62", "63", "64", "65", "66", "67", "68", "69", "70"},
        {"62", "63", "64", "65", "66", "67", "68", "69", "70", "71"},
        {"63", "64", "65", "66", "67", "68", "69", "70", "71", "72"},
        {"64", "65", "66", "67", "68", "69", "70", "71", "72", "73"},
        {"65", "66", "67", "68", "69", "70", "71", "72", "73", "74"},
        {"66", "67", "68", "69", "70", "71", "72", "73", "74", "75"},
        {"67", "68", "69", "70", "71", "72", "73", "74", "75", "76"},
        {"68", "69", "70", "71", "72", "73", "74", "75", "76", "77"},
        {"69", "70", "71", "72", "73", "74", "75", "76", "77", "78"},
        {"70", "71", "72", "73", "74", "75", "76", "77", "78", "79"},
        {"71", "72", "73", "74", "75", "76", "77", "78", "79", "80"},
        {"72", "73", "74", "75", "76", "77", "78", "79", "80", "81"},
        {"73", "74", "75", "76", "77", "78", "79", "80", "81", "82"},
        {"74", "75", "76", "77", "78", "79", "80", "81", "82", "83"},
        {"75", "76", "77", "78", "79", "80", "81", "82", "83", "84"},
        {"76", "77", "78", "79", "80", "81", "82", "83", "84", "85"},
        {"77", "78", "79", "80", "81", "82", "83", "84", "85", "86"},
        {"78", "79", "80", "81", "82", "83", "84", "85", "86", "87"},
        {"79", "80", "81", "82", "83", "84", "85", "86", "87", "88"},
        {"80", "81", "82", "83", "84", "85", "86", "87", "88", "89"},
        {"81", "82", "83", "84", "85", "86", "87", "88", "89", "90"}
    };

    // x10 si el valor de x representa a un número de dos dígitos
    if (Longitud(x) == 2)
        return tabla[(x[0] - 48) * 10 + (x[1] - 48)][y - 48];    
    else
        return tabla[x[0] - 48][y - 48];

}

// Multiplica dos números. Calcula incluso números con punto decimal
string Multiplicacion(string a, string b)
{
    string multiplicacion, signo = Signar(a, b);

    // Remueve el signo (-) de ambos números
    a = Absoluto(a); 
    b = Absoluto(b);

    int A = 0, B = 0;

    // Busca el signo (.) en ambos números.  Si 'a' o 'b'
    //  tienen punto decimal se calcula cuántos dígitos son
    //  y se remueven del número (para operar sin problemas).
    if (Buscar('.', a)) {
        int pos = Posicion('.', a);

        A = Longitud(a) - pos - 1;
        a = Extracto(a, 0, pos) + Extracto(a, -1 * A);
    }

    if (Buscar('.', b)) {
        int pos = Posicion('.', b);

        B = Longitud(b) - pos - 1;
        b = Extracto(b, 0, pos) + Extracto(b, -1 * B);
    }

    // Calcula la longitud de "la escalera" de la multiplicación
    string multipl[Longitud(b)];
    
    // El número 'b' corresponde al multiplicador
    for (int j = Longitud(b) - 1; j > -1; j--) {
        char acarreo = '0'; 
        
        // El número 'a' corresponde al multiplicando
        string mult = "";
        for (int i = Longitud(a) - 1; i > -1; i--) {

            // Multiplica las posiciones a[i] y b[j].  Suma al resultado
            //   el valor de acarreo.
            string c = TablaSuma(TablaMultiplicacion(a[i], b[j]), acarreo);

            // Si 'c' es un número menor a 10 se limpia el valor de acarreo.
            //  Sino, se divide el número en 2 mitades: la unidad para 'c'
            //  y la decena como nuevo valor de acarreo.
            if (Longitud(c) == 1)
                acarreo = '0';
            
            else {
                acarreo = c[0]; c = c[1];
            }

            mult = c + mult;
        }

        // También en la multiplicación se deben alinear los resultados parciales
        //  y rellenar con ceros a la izquierda y derecha.
        int cerosIzquierda = 1;

        if (acarreo != '0') {
            mult = acarreo + mult; 
            
            cerosIzquierda = 0;
        }

        // La ESCALERA: Descomente la siguiente línea para ver de lo que hablo.
        //  cout << Repetir(" ", j + cerosIzquierda) << mult << endl;

        mult = Repetir("0", j + cerosIzquierda) + mult + Repetir("0", Longitud(b) - j - 1);

        multipl[j] = mult;
    }

    string acarreo = "0";

    // Esta parte de código es muy similar al algoritmo de suma manual
    for (int j = Longitud(multipl[0]) - 1; j > -1; j--) {
        string c = acarreo;

        // Suma N-cantidad de dígitos a la vez
        for (int i = 0; i < Longitud(b); i++)
            c = TablaSuma(c, multipl[i][j]);
        
        if (Longitud(c) == 1)
            acarreo = "0";

        else {
            acarreo = c[0]; c = c[1];
        }
        
        multiplicacion = c + multiplicacion;
    }

    // Verifica que no haya quedado ningún valor en acarreo.
    if (acarreo != "0") multiplicacion = acarreo = multiplicacion;

    // Agrega de vuelta el punto decimal
    if (A + B > 0) {
        int digitos   = Longitud(multiplicacion);
        int decimales = A + B;

        // La posición del punto decimal es la suma del número de 
        //   decimales de 'a' y 'b' de derecha a izquierda.
        multiplicacion = Extracto(multiplicacion, 0, digitos - decimales) + '.' + Extracto(multiplicacion, -1 * decimales); 

        // Quita los últimos ceros de los dígitos
        int i = Longitud(multiplicacion);
        
        while (multiplicacion[i - 1] == '0') 
            i--;
    
        multiplicacion = Extracto(multiplicacion, 0, i);
    }

    // Quita el punto decimal si no tiene decimales
    if (Extracto(multiplicacion, -1) == ".")
        multiplicacion = Extracto(multiplicacion, 0, Longitud(multiplicacion) - 1);

    // Quita el 0 a la izquierda si el valor de la resta NO está 
    //   en el rango 0 a 1
    if (multiplicacion[0] == '0' && multiplicacion[1] != '.')
        multiplicacion = Extracto(multiplicacion, 1);

    return signo + multiplicacion;
}

int main() { 
    cout << Multiplicacion("4.19", "-7.31"); // Debe imprimir -30.6289 
}
