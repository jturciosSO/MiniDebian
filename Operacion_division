/* Esta es la parte donde se colocara la division */
#include <iostream>
#include <string>

using namespace std;

// Prototipo de función Extracto 
string Extracto(string, int, int = -1);

// Prototipo de función Rango
int* Rango(int, int, int = 1);


// Devuelve verdadero si el caracter es encontrado en una cadena
bool Buscar(char caracter, string cadena)
{
    int i = 0;
    while (cadena[i]) {
        
        // Evalúa uno por uno cada índice de la cadena
        if (cadena[i] == caracter)
            return true;

        i++;

    }

    return false;
}

// Devuelve la longitud de caracteres de una cadena
int Longitud(string cadena)
{
    int i = 0;
    
    while (cadena[i])
        i++;

    return i;
}

// Devuelve una subcadena de la cadena principal
string Extracto(string cadena, int indice, int longitud)
{
    string extracto = "";
    
    // Si el valor del índice es negativo, calculará desde el final de la cadena
    if (indice < 0)
        indice = Longitud(cadena) + indice; 
        
    // Si la longitud es negativa, se devolverá una subcadena hasta el 
    // final de la cadena principal
    if (longitud == -1)
        longitud = Longitud(cadena) - indice;
    
    // Si el índice indicado no existe se devolverá una cadena vacía
    if (!cadena[indice])
        return "";
    
    // Se obtiene el rango de índices que se extraerá de la cadena original
    int* indices = Rango(indice, indice + longitud - 1); 
    
    int i = 0;
    while (longitud) {
        
        if (indices[i] > Longitud(cadena))
            return extracto;
        else
            extracto += cadena[indices[i]];
            
        i++; longitud--;
    }
    
    return extracto;
}

// Intercambia los valores de 2 variables
void Intercambiar(string &a, string &b)
{
    string c = a;
    
    a = b; b = c;
}

// Devuelve la posición de la primera coincidencia de un caracter 
//   en una cadena dada.
int Posicion(char caracter, string cadena)
{
    int i = 0;

    while (cadena[i]) {

        if (cadena[i] == caracter)
            return i;

        i++;

    }

    return -1;
}

// Devuelve un arreglo de números dentro de un rango dado
int* Rango(int inicio, int fin, int salto) 
{
    int longitud = 0;
    
    // Calcula el número de números que tendrá el rango indicado
    // Esto por que es posible indicar el tamaño del salto
    
    // El rango es ascendente
    if (inicio < fin) 
        for (int i = inicio; i <= fin; i+= salto)
            longitud++;
    
    // El rango es descendente
    else
        for (int i = fin; i >=  inicio; i-= salto)
            longitud++;
    
    int* rango = new int[longitud]; // Declara el tamaño del arreglo exacto
    int indice = 0;
    
    int valor = inicio;
    while (longitud > 0) {
        rango[indice] = valor;
        
        indice += 1;
        valor += 1 * salto;         // Indica el tamaño del salto
        longitud--;
    }
    
    return rango;
}

// Repite una cadena N-cantidad de veces
string Repetir(string cadena, unsigned int nveces)
{
    string repetir = "";
    
    while (nveces-- > 0)
        repetir += cadena;
    
    return repetir;
}

// Quita el signo menos de un número
string Absoluto(string a)
{
    if (a[0] == '-')
        return Extracto(a, 1);

    return a;
}

// Iguala el número de dígitos de dos números dados
void Alinear(string &a, string &b)
{
    int A, B;

    // 1. Busca el punto decimal
    if (Buscar('.', a))
        A = Posicion('.', a);
    else
        A = Longitud(a);

    if (Buscar('.', b))
        B = Posicion('.', b);
    else
        B = Longitud(b);

    // 2. Determina qué número es mayor y agrega ceros
    //      a la izquierda del menor.    
    if (A > B)
        b = Repetir("0", A - B) + b;
    else
        a = Repetir("0", B - A) + a;

    // 3. Agrega ceros en la parte decimal del número
    //     con menos decimales.    
    if (Longitud(a) > Longitud(b))
        b += Repetir("0", Longitud(a) - Longitud(b));
    else
        a += Repetir("0", Longitud(b) - Longitud(a));
}

// Devuelve TRUE si ambos parámetros representan el mismo valor
bool EsIgual(string a, string b)
{
    // Primero alinea los números y verifica que no sean iguales
    Alinear(a, b); if (a == b) return true;

    int i = 0;
    while (a[i]) 
    {
        if (a[i] != b[i]) return false;

        i++;
    }

    return true;
}

// Devuelve TRUE si el primer parámetro representa un número
//  mayor que el segundo número
bool EsMayor(string a, string b)
{
    // Primero alinea los números y verifica que no sean iguales
    Alinear(a, b); if (a == b) return false;

    int i = 0;

    // Solo se verican los dígitos hasta antes del punto decimal
    while (a[i] && a[i] != '.') 
    {
        if (a[i] > b[i]) 
            return true;
        
        else if (a[i] < b[i])
            return false;

        i++;
    }

    return true;
}

// Aplica la ley de signos. El caracter ^ representa 
//  la operación lógica XOR.
string Signar(string a, string b)
{
    //   + * + = +
    //   + * - = -
    //   - * + = -
    //   - * - = +

    return ((a[0] == '-') ^ (b[0] == '-')) ? "-" : "";
}

// Emula las tablas de la multiplicación, desde 0 * 0 a 9 * 9
string TablaMultiplicacion(char x, char y)
{
    string tabla[10][10] = {
        {"0", "0",  "0",  "0",  "0",  "0",  "0",  "0",  "0",  "0"},
        {"0", "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9"},
        {"0", "2",  "4",  "6",  "8", "10", "12", "14", "16", "18"},
        {"0", "3",  "6",  "9", "12", "15", "18", "21", "24", "27"},
        {"0", "4",  "8", "12", "16", "20", "24", "28", "32", "36"},
        {"0", "5", "10", "15", "20", "25", "30", "35", "40", "45"},
        {"0", "6", "12", "18", "24", "30", "36", "42", "48", "54"},
        {"0", "7", "14", "21", "28", "35", "42", "49", "56", "63"},
        {"0", "8", "16", "24", "32", "40", "48", "56", "64", "72"},
        {"0", "9", "18", "27", "36", "45", "54", "63", "72", "81"}
    };
    
    return tabla[x - 48][y - 48];
}

string TablaResta(char x, char y)
{
    string resta = "";

    string tabla[10][10] = {
        {  "0",  "-1",  "-2",  "-3",  "-4",  "-5",  "-6",  "-7",  "-8",  "-9"},
        {  "1",   "0",  "-1",  "-2",  "-3",  "-4",  "-5",  "-6",  "-7",  "-8"},
        {  "2",   "1",   "0",  "-1",  "-2",  "-3",  "-4",  "-5",  "-6",  "-7"},
        {  "3",   "2",   "1",   "0",  "-1",  "-2",  "-3",  "-4",  "-5",  "-6"},
        {  "4",   "3",   "2",   "1",   "0",  "-1",  "-2",  "-3",  "-4",  "-5"},
        {  "5",   "4",   "3",   "2",   "1",   "0",  "-1",  "-2",  "-3",  "-4"},
        {  "6",   "5",   "4",   "3",   "2",   "1",   "0",  "-1",  "-2",  "-3"},
        {  "7",   "6",   "5",   "4",   "3",   "2",   "1",   "0",  "-1",  "-2"},
        {  "8",   "7",   "6",   "5",   "4",   "3",   "2",   "1",   "0",  "-1"},
        {  "9",   "8",   "7",   "6",   "5",   "4",   "3",   "2",   "1",   "0"}
    };

    return tabla[x - 48][y - 48];
}

string TablaResta(string x, char y)
{
    string resta = "";

    string tabla[10][10] = {
        { "10",   "9",   "8",   "7",   "6",   "5",   "4",   "3",   "2",   "1"},
        { "11",  "10",   "9",   "8",   "7",   "6",   "5",   "4",   "3",   "2"},
        { "12",  "11",  "10",   "9",   "8",   "7",   "6",   "5",   "4",   "3"},
        { "13",  "12",  "11",  "10",   "9",   "8",   "7",   "6",   "5",   "4"},
        { "14",  "13",  "12",  "11",  "10",   "9",   "8",   "7",   "6",   "5"},
        { "15",  "14",  "13",  "12",  "11",  "10",   "9",   "8",   "7",   "6"},
        { "16",  "15",  "14",  "13",  "12",  "11",  "10",   "9",   "8",   "7"},
        { "17",  "16",  "15",  "14",  "13",  "12",  "11",  "10",   "9",   "8"},
        { "18",  "17",  "16",  "15",  "14",  "13",  "12",  "11",  "10",   "9"},
        { "19",  "18",  "17",  "16",  "15",  "14",  "13",  "12",  "11",  "10"}
    };

    return tabla[x[1] - 48][y - 48];
}

// Emula la suma de dos números; el primero puede ser un entero de
//  dos digitos máximo y el segundo solo un dígito.
string TablaSuma(string x, char y)
{
    string tabla[82][10] = {
        { "0",  "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9"},
        { "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9", "10"},
        { "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9", "10", "11"},
        { "3",  "4",  "5",  "6",  "7",  "8",  "9", "10", "11", "12"},
        { "4",  "5",  "6",  "7",  "8",  "9", "10", "11", "12", "13"},
        { "5",  "6",  "7",  "8",  "9", "10", "11", "12", "13", "14"},
        { "6",  "7",  "8",  "9", "10", "11", "12", "13", "14", "15"},
        { "7",  "8",  "9", "10", "11", "12", "13", "14", "15", "16"},
        { "8",  "9", "10", "11", "12", "13", "14", "15", "16", "17"},
        { "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"},
        {"10", "11", "12", "13", "14", "15", "16", "17", "18", "19"},
        {"11", "12", "13", "14", "15", "16", "17", "18", "19", "20"},
        {"12", "13", "14", "15", "16", "17", "18", "19", "20", "21"},
        {"13", "14", "15", "16", "17", "18", "19", "20", "21", "22"},
        {"14", "15", "16", "17", "18", "19", "20", "21", "22", "23"},
        {"15", "16", "17", "18", "19", "20", "21", "22", "23", "24"},
        {"16", "17", "18", "19", "20", "21", "22", "23", "24", "25"},
        {"17", "18", "19", "20", "21", "22", "23", "24", "25", "26"},
        {"18", "19", "20", "21", "22", "23", "24", "25", "26", "27"},
        {"19", "20", "21", "22", "23", "24", "25", "26", "27", "28"},
        {"20", "21", "22", "23", "24", "25", "26", "27", "28", "29"},
        {"21", "22", "23", "24", "25", "26", "27", "28", "29", "30"},
        {"22", "23", "24", "25", "26", "27", "28", "29", "30", "31"},
        {"23", "24", "25", "26", "27", "28", "29", "30", "31", "32"},
        {"24", "25", "26", "27", "28", "29", "30", "31", "32", "33"},
        {"25", "26", "27", "28", "29", "30", "31", "32", "33", "34"},
        {"26", "27", "28", "29", "30", "31", "32", "33", "34", "35"},
        {"27", "28", "29", "30", "31", "32", "33", "34", "35", "36"},
        {"28", "29", "30", "31", "32", "33", "34", "35", "36", "37"},
        {"29", "30", "31", "32", "33", "34", "35", "36", "37", "38"},
        {"30", "31", "32", "33", "34", "35", "36", "37", "38", "39"},
        {"31", "32", "33", "34", "35", "36", "37", "38", "39", "40"},
        {"32", "33", "34", "35", "36", "37", "38", "39", "40", "41"},
        {"33", "34", "35", "36", "37", "38", "39", "40", "41", "42"},
        {"34", "35", "36", "37", "38", "39", "40", "41", "42", "43"},
        {"35", "36", "37", "38", "39", "40", "41", "42", "43", "44"},
        {"36", "37", "38", "39", "40", "41", "42", "43", "44", "45"},
        {"37", "38", "39", "40", "41", "42", "43", "44", "45", "46"},
        {"38", "39", "40", "41", "42", "43", "44", "45", "46", "47"},
        {"39", "40", "41", "42", "43", "44", "45", "46", "47", "48"},
        {"40", "41", "42", "43", "44", "45", "46", "47", "48", "49"},
        {"41", "42", "43", "44", "45", "46", "47", "48", "49", "50"},
        {"42", "43", "44", "45", "46", "47", "48", "49", "50", "51"},
        {"43", "44", "45", "46", "47", "48", "49", "50", "51", "52"},
        {"44", "45", "46", "47", "48", "49", "50", "51", "52", "53"},
        {"45", "46", "47", "48", "49", "50", "51", "52", "53", "54"},
        {"46", "47", "48", "49", "50", "51", "52", "53", "54", "55"},
        {"47", "48", "49", "50", "51", "52", "53", "54", "55", "56"},
        {"48", "49", "50", "51", "52", "53", "54", "55", "56", "57"},
        {"49", "50", "51", "52", "53", "54", "55", "56", "57", "58"},
        {"50", "51", "52", "53", "54", "55", "56", "57", "58", "59"},
        {"51", "52", "53", "54", "55", "56", "57", "58", "59", "60"},
        {"52", "53", "54", "55", "56", "57", "58", "59", "60", "61"},
        {"53", "54", "55", "56", "57", "58", "59", "60", "61", "62"},
        {"54", "55", "56", "57", "58", "59", "60", "61", "62", "63"},
        {"55", "56", "57", "58", "59", "60", "61", "62", "63", "64"},
        {"56", "57", "58", "59", "60", "61", "62", "63", "64", "65"},
        {"57", "58", "59", "60", "61", "62", "63", "64", "65", "66"},
        {"58", "59", "60", "61", "62", "63", "64", "65", "66", "67"},
        {"59", "60", "61", "62", "63", "64", "65", "66", "67", "68"},
        {"60", "61", "62", "63", "64", "65", "66", "67", "68", "69"},
        {"61", "62", "63", "64", "65", "66", "67", "68", "69", "70"},
        {"62", "63", "64", "65", "66", "67", "68", "69", "70", "71"},
        {"63", "64", "65", "66", "67", "68", "69", "70", "71", "72"},
        {"64", "65", "66", "67", "68", "69", "70", "71", "72", "73"},
        {"65", "66", "67", "68", "69", "70", "71", "72", "73", "74"},
        {"66", "67", "68", "69", "70", "71", "72", "73", "74", "75"},
        {"67", "68", "69", "70", "71", "72", "73", "74", "75", "76"},
        {"68", "69", "70", "71", "72", "73", "74", "75", "76", "77"},
        {"69", "70", "71", "72", "73", "74", "75", "76", "77", "78"},
        {"70", "71", "72", "73", "74", "75", "76", "77", "78", "79"},
        {"71", "72", "73", "74", "75", "76", "77", "78", "79", "80"},
        {"72", "73", "74", "75", "76", "77", "78", "79", "80", "81"},
        {"73", "74", "75", "76", "77", "78", "79", "80", "81", "82"},
        {"74", "75", "76", "77", "78", "79", "80", "81", "82", "83"},
        {"75", "76", "77", "78", "79", "80", "81", "82", "83", "84"},
        {"76", "77", "78", "79", "80", "81", "82", "83", "84", "85"},
        {"77", "78", "79", "80", "81", "82", "83", "84", "85", "86"},
        {"78", "79", "80", "81", "82", "83", "84", "85", "86", "87"},
        {"79", "80", "81", "82", "83", "84", "85", "86", "87", "88"},
        {"80", "81", "82", "83", "84", "85", "86", "87", "88", "89"},
        {"81", "82", "83", "84", "85", "86", "87", "88", "89", "90"}
    };

    // x10 si el valor de x representa a un número de dos dígitos
    if (Longitud(x) == 2)
        return tabla[(x[0] - 48) * 10 + (x[1] - 48)][y - 48];    
    else
        return tabla[x[0] - 48][y - 48];

}

// Multiplica dos números. Calcula incluso números con punto decimal
string Multiplicacion(string a, string b)
{
    string multiplicacion, signo = Signar(a, b);

    // Remueve el signo (-) de ambos números
    a = Absoluto(a); 
    b = Absoluto(b);

    int A = 0, B = 0;

    // Busca el signo (.) en ambos números.  Si 'a' o 'b'
    //  tienen punto decimal se calcula cuántos dígitos son
    //  y se remueven del número (para operar sin problemas).
    if (Buscar('.', a)) {
        int pos = Posicion('.', a);

        A = Longitud(a) - pos - 1;
        a = Extracto(a, 0, pos) + Extracto(a, -1 * A);
    }

    if (Buscar('.', b)) {
        int pos = Posicion('.', b);

        B = Longitud(b) - pos - 1;
        b = Extracto(b, 0, pos) + Extracto(b, -1 * B);
    }

    // Calcula la longitud de "la escalera" de la multiplicación
    string multipl[Longitud(b)];
    
    // El número 'b' corresponde al multiplicador
    for (int j = Longitud(b) - 1; j > -1; j--) {
        char acarreo = '0'; 
        
        // El número 'a' corresponde al multiplicando
        string mult = "";
        for (int i = Longitud(a) - 1; i > -1; i--) {

            // Multiplica las posiciones a[i] y b[j].  Suma al resultado
            //   el valor de acarreo.
            string c = TablaSuma(TablaMultiplicacion(a[i], b[j]), acarreo);

            // Si 'c' es un número menor a 10 se limpia el valor de acarreo.
            //  Sino, se divide el número en 2 mitades: la unidad para 'c'
            //  y la decena como nuevo valor de acarreo.
            if (Longitud(c) == 1)
                acarreo = '0';
            
            else {
                acarreo = c[0]; c = c[1];
            }

            mult = c + mult;
        }

        // También en la multiplicación se deben alinear los resultados parciales
        //  y rellenar con ceros a la izquierda y derecha.
        int cerosIzquierda = 1;

        if (acarreo != '0') {
            mult = acarreo + mult; 
            
            cerosIzquierda = 0;
        }

        // La ESCALERA: Descomente la siguiente línea para ver de lo que hablo.
        //  cout << Repetir(" ", j + cerosIzquierda) << mult << endl;

        mult = Repetir("0", j + cerosIzquierda) + mult + Repetir("0", Longitud(b) - j - 1);

        multipl[j] = mult;
    }

    string acarreo = "0";

    // Esta parte de código es muy similar al algoritmo de suma manual
    for (int j = Longitud(multipl[0]) - 1; j > -1; j--) {
        string c = acarreo;

        // Suma N-cantidad de dígitos a la vez
        for (int i = 0; i < Longitud(b); i++)
            c = TablaSuma(c, multipl[i][j]);
        
        if (Longitud(c) == 1)
            acarreo = "0";

        else {
            acarreo = c[0]; c = c[1];
        }
        
        multiplicacion = c + multiplicacion;
    }

    // Verifica que no haya quedado ningún valor en acarreo.
    if (acarreo != "0") multiplicacion = acarreo = multiplicacion;

    // Agrega de vuelta el punto decimal
    if (A + B > 0) {
        int digitos   = Longitud(multiplicacion);
        int decimales = A + B;

        // La posición del punto decimal es la suma del número de 
        //   decimales de 'a' y 'b' de derecha a izquierda.
        multiplicacion = Extracto(multiplicacion, 0, digitos - decimales) + '.' + Extracto(multiplicacion, -1 * decimales); 

        // Quita los últimos ceros de los dígitos
        int i = Longitud(multiplicacion);
        
        while (multiplicacion[i - 1] == '0') 
            i--;
    
        multiplicacion = Extracto(multiplicacion, 0, i);
    }

    // Quita el punto decimal si no tiene decimales
    if (Extracto(multiplicacion, -1) == ".")
        multiplicacion = Extracto(multiplicacion, 0, Longitud(multiplicacion) - 1);

    // Quita el 0 a la izquierda si el valor de la resta NO está 
    //   en el rango 0 a 1
    if (multiplicacion[0] == '0' && multiplicacion[1] != '.')
        multiplicacion = Extracto(multiplicacion, 1);

    return signo + multiplicacion;
}

string Resta(string a, string b)
{
    string signo, resta;

    // Pregunta si a es mayor a b, sino no es (! = negación)
    //  intercambia los valores y asigna el signo menos.
    if (!EsMayor(a, b)) {
        Intercambiar(a, b);

        signo = "-";
    }

    Alinear(a, b);

    // Empezará a recorrer cada dígito de derecha a izquierda
    int i = Longitud(a) - 1;
    
    while (i > -1) 
    {
        if (a[i] == '.')
            resta = '.' + resta;
        
        else {
            string diferencia = TablaResta(a[i], b[i]); 
            
            // El valor de 'diferencia' es negativo?
            if (diferencia[0] == '-') {
                int j = i - 1;

                // Moverse al dígito a la izquierda.  Puede que encontremos
                //  un dígito '0' al que deberíamos 'prestar'.
                while (a[j] == '0' || a[j] == '.') 
                {
                    if (a[j] == '0') a[j] = '9';

                    j--;
                }

                a[j] = TablaResta(a[j], '1')[0];

                // Volvemos a consultar la tabla de resta (sobrecargada)
                diferencia = TablaResta("1" + string(1, a[i]), b[i]);
            }

            resta = diferencia + resta;
        }
        
        i--;
    }

    // Quita el punto decimal si no tiene decimales
    if (Extracto(resta, -1) == ".")
        resta = Extracto(resta, 0, Longitud(resta) - 1);

    // Quita el 0 a la izquierda si el valor de la resta NO está 
    //  en el rango 0 a 1
    if (resta[0] == '0' && resta[1] != '.')
        resta = Extracto(resta, 1);
    
    return signo + resta;
}

string *TablaDivision(string x, string y)
{
    string *c_r = new string[2];

    if ((x == "0") || (x == "1") || (y == "1") || (EsIgual(x, y)))
        c_r[1] = "0";
    
    else if (EsMayor(y, x))
        c_r[1] = "X";

    ///

    if ((x == "0") || (x == "1") || (y == "1"))
        c_r[0] = x;
    
    else if (EsIgual(x, y))
        c_r[0] = "1";
    
    else if (EsMayor(y, x))
        c_r[0] = "0";

    else {
        string tabla[99][8][2] = {
            { { "1", "1"}  },
            { { "2", "0"}, { "1", "1"}  },
            { { "2", "1"}, { "1", "2"}, { "1", "1"}  },
            { { "3", "0"}, { "2", "0"}, { "1", "2"}, { "1", "1"}  },
            { { "3", "1"}, { "2", "1"}, { "1", "3"}, { "1", "2"}, { "1", "1"}  },
            { { "4", "0"}, { "2", "2"}, { "2", "0"}, { "1", "3"}, { "1", "2"}, { "1", "1"}  },
            { { "4", "1"}, { "3", "0"}, { "2", "1"}, { "1", "4"}, { "1", "3"}, { "1", "2"}, { "1", "1"}  },
            { { "5", "0"}, { "3", "1"}, { "2", "2"}, { "2", "0"}, { "1", "4"}, { "1", "3"}, { "1", "2"}, { "1", "1"} },
            { { "5", "1"}, { "3", "2"}, { "2", "3"}, { "2", "1"}, { "1", "5"}, { "1", "4"}, { "1", "3"}, { "1", "2"} },
            { { "6", "0"}, { "4", "0"}, { "3", "0"}, { "2", "2"}, { "2", "0"}, { "1", "5"}, { "1", "4"}, { "1", "3"} },
            { { "6", "1"}, { "4", "1"}, { "3", "1"}, { "2", "3"}, { "2", "1"}, { "1", "6"}, { "1", "5"}, { "1", "4"} },
            { { "7", "0"}, { "4", "2"}, { "3", "2"}, { "2", "4"}, { "2", "2"}, { "2", "0"}, { "1", "6"}, { "1", "5"} },
            { { "7", "1"}, { "5", "0"}, { "3", "3"}, { "3", "0"}, { "2", "3"}, { "2", "1"}, { "1", "7"}, { "1", "6"} },
            { { "8", "0"}, { "5", "1"}, { "4", "0"}, { "3", "1"}, { "2", "4"}, { "2", "2"}, { "2", "0"}, { "1", "7"} },
            { { "8", "1"}, { "5", "2"}, { "4", "1"}, { "3", "2"}, { "2", "5"}, { "2", "3"}, { "2", "1"}, { "1", "8"} },
            { { "9", "0"}, { "6", "0"}, { "4", "2"}, { "3", "3"}, { "3", "0"}, { "2", "4"}, { "2", "2"}, { "2", "0"} },
            { { "9", "1"}, { "6", "1"}, { "4", "3"}, { "3", "4"}, { "3", "1"}, { "2", "5"}, { "2", "3"}, { "2", "1"} },
            { {"10", "0"}, { "6", "2"}, { "5", "0"}, { "4", "0"}, { "3", "2"}, { "2", "6"}, { "2", "4"}, { "2", "2"} },
            { {"10", "1"}, { "7", "0"}, { "5", "1"}, { "4", "1"}, { "3", "3"}, { "3", "0"}, { "2", "5"}, { "2", "3"} },
            { {"11", "0"}, { "7", "1"}, { "5", "2"}, { "4", "2"}, { "3", "4"}, { "3", "1"}, { "2", "6"}, { "2", "4"} },
            { {"11", "1"}, { "7", "2"}, { "5", "3"}, { "4", "3"}, { "3", "5"}, { "3", "2"}, { "2", "7"}, { "2", "5"} },
            { {"12", "0"}, { "8", "0"}, { "6", "0"}, { "4", "4"}, { "4", "0"}, { "3", "3"}, { "3", "0"}, { "2", "6"} },
            { {"12", "1"}, { "8", "1"}, { "6", "1"}, { "5", "0"}, { "4", "1"}, { "3", "4"}, { "3", "1"}, { "2", "7"} },
            { {"13", "0"}, { "8", "2"}, { "6", "2"}, { "5", "1"}, { "4", "2"}, { "3", "5"}, { "3", "2"}, { "2", "8"} },
            { {"13", "1"}, { "9", "0"}, { "6", "3"}, { "5", "2"}, { "4", "3"}, { "3", "6"}, { "3", "3"}, { "3", "0"} },
            { {"14", "0"}, { "9", "1"}, { "7", "0"}, { "5", "3"}, { "4", "4"}, { "4", "0"}, { "3", "4"}, { "3", "1"} },
            { {"14", "1"}, { "9", "2"}, { "7", "1"}, { "5", "4"}, { "4", "5"}, { "4", "1"}, { "3", "5"}, { "3", "2"} },
            { {"15", "0"}, {"10", "0"}, { "7", "2"}, { "6", "0"}, { "5", "0"}, { "4", "2"}, { "3", "6"}, { "3", "3"} },
            { {"15", "1"}, {"10", "1"}, { "7", "3"}, { "6", "1"}, { "5", "1"}, { "4", "3"}, { "3", "7"}, { "3", "4"} },
            { {"16", "0"}, {"10", "2"}, { "8", "0"}, { "6", "2"}, { "5", "2"}, { "4", "4"}, { "4", "0"}, { "3", "5"} },
            { {"16", "1"}, {"11", "0"}, { "8", "1"}, { "6", "3"}, { "5", "3"}, { "4", "5"}, { "4", "1"}, { "3", "6"} },
            { {"17", "0"}, {"11", "1"}, { "8", "2"}, { "6", "4"}, { "5", "4"}, { "4", "6"}, { "4", "2"}, { "3", "7"} },
            { {"17", "1"}, {"11", "2"}, { "8", "3"}, { "7", "0"}, { "5", "5"}, { "5", "0"}, { "4", "3"}, { "3", "8"} },
            { {"18", "0"}, {"12", "0"}, { "9", "0"}, { "7", "1"}, { "6", "0"}, { "5", "1"}, { "4", "4"}, { "4", "0"} },
            { {"18", "1"}, {"12", "1"}, { "9", "1"}, { "7", "2"}, { "6", "1"}, { "5", "2"}, { "4", "5"}, { "4", "1"} },
            { {"19", "0"}, {"12", "2"}, { "9", "2"}, { "7", "3"}, { "6", "2"}, { "5", "3"}, { "4", "6"}, { "4", "2"} },
            { {"19", "1"}, {"13", "0"}, { "9", "3"}, { "7", "4"}, { "6", "3"}, { "5", "4"}, { "4", "7"}, { "4", "3"} },
            { {"20", "0"}, {"13", "1"}, {"10", "0"}, { "8", "0"}, { "6", "4"}, { "5", "5"}, { "5", "0"}, { "4", "4"} },
            { {"20", "1"}, {"13", "2"}, {"10", "1"}, { "8", "1"}, { "6", "5"}, { "5", "6"}, { "5", "1"}, { "4", "5"} },
            { {"21", "0"}, {"14", "0"}, {"10", "2"}, { "8", "2"}, { "7", "0"}, { "6", "0"}, { "5", "2"}, { "4", "6"} },
            { {"21", "1"}, {"14", "1"}, {"10", "3"}, { "8", "3"}, { "7", "1"}, { "6", "1"}, { "5", "3"}, { "4", "7"} },
            { {"22", "0"}, {"14", "2"}, {"11", "0"}, { "8", "4"}, { "7", "2"}, { "6", "2"}, { "5", "4"}, { "4", "8"} },
            { {"22", "1"}, {"15", "0"}, {"11", "1"}, { "9", "0"}, { "7", "3"}, { "6", "3"}, { "5", "5"}, { "5", "0"} },
            { {"23", "0"}, {"15", "1"}, {"11", "2"}, { "9", "1"}, { "7", "4"}, { "6", "4"}, { "5", "6"}, { "5", "1"} },
            { {"23", "1"}, {"15", "2"}, {"11", "3"}, { "9", "2"}, { "7", "5"}, { "6", "5"}, { "5", "7"}, { "5", "2"} },
            { {"24", "0"}, {"16", "0"}, {"12", "0"}, { "9", "3"}, { "8", "0"}, { "6", "6"}, { "6", "0"}, { "5", "3"} },
            { {"24", "1"}, {"16", "1"}, {"12", "1"}, { "9", "4"}, { "8", "1"}, { "7", "0"}, { "6", "1"}, { "5", "4"} },
            { {"25", "0"}, {"16", "2"}, {"12", "2"}, {"10", "0"}, { "8", "2"}, { "7", "1"}, { "6", "2"}, { "5", "5"} },
            { {"25", "1"}, {"17", "0"}, {"12", "3"}, {"10", "1"}, { "8", "3"}, { "7", "2"}, { "6", "3"}, { "5", "6"} },
            { {"26", "0"}, {"17", "1"}, {"13", "0"}, {"10", "2"}, { "8", "4"}, { "7", "3"}, { "6", "4"}, { "5", "7"} },
            { {"26", "1"}, {"17", "2"}, {"13", "1"}, {"10", "3"}, { "8", "5"}, { "7", "4"}, { "6", "5"}, { "5", "8"} },
            { {"27", "0"}, {"18", "0"}, {"13", "2"}, {"10", "4"}, { "9", "0"}, { "7", "5"}, { "6", "6"}, { "6", "0"} },
            { {"27", "1"}, {"18", "1"}, {"13", "3"}, {"11", "0"}, { "9", "1"}, { "7", "6"}, { "6", "7"}, { "6", "1"} },
            { {"28", "0"}, {"18", "2"}, {"14", "0"}, {"11", "1"}, { "9", "2"}, { "8", "0"}, { "7", "0"}, { "6", "2"} },
            { {"28", "1"}, {"19", "0"}, {"14", "1"}, {"11", "2"}, { "9", "3"}, { "8", "1"}, { "7", "1"}, { "6", "3"} },
            { {"29", "0"}, {"19", "1"}, {"14", "2"}, {"11", "3"}, { "9", "4"}, { "8", "2"}, { "7", "2"}, { "6", "4"} },
            { {"29", "1"}, {"19", "2"}, {"14", "3"}, {"11", "4"}, { "9", "5"}, { "8", "3"}, { "7", "3"}, { "6", "5"} },
            { {"30", "0"}, {"20", "0"}, {"15", "0"}, {"12", "0"}, {"10", "0"}, { "8", "4"}, { "7", "4"}, { "6", "6"} },
            { {"30", "1"}, {"20", "1"}, {"15", "1"}, {"12", "1"}, {"10", "1"}, { "8", "5"}, { "7", "5"}, { "6", "7"} },
            { {"31", "0"}, {"20", "2"}, {"15", "2"}, {"12", "2"}, {"10", "2"}, { "8", "6"}, { "7", "6"}, { "6", "8"} },
            { {"31", "1"}, {"21", "0"}, {"15", "3"}, {"12", "3"}, {"10", "3"}, { "9", "0"}, { "7", "7"}, { "7", "0"} },
            { {"32", "0"}, {"21", "1"}, {"16", "0"}, {"12", "4"}, {"10", "4"}, { "9", "1"}, { "8", "0"}, { "7", "1"} },
            { {"32", "1"}, {"21", "2"}, {"16", "1"}, {"13", "0"}, {"10", "5"}, { "9", "2"}, { "8", "1"}, { "7", "2"} },
            { {"33", "0"}, {"22", "0"}, {"16", "2"}, {"13", "1"}, {"11", "0"}, { "9", "3"}, { "8", "2"}, { "7", "3"} },
            { {"33", "1"}, {"22", "1"}, {"16", "3"}, {"13", "2"}, {"11", "1"}, { "9", "4"}, { "8", "3"}, { "7", "4"} },
            { {"34", "0"}, {"22", "2"}, {"17", "0"}, {"13", "3"}, {"11", "2"}, { "9", "5"}, { "8", "4"}, { "7", "5"} },
            { {"34", "1"}, {"23", "0"}, {"17", "1"}, {"13", "4"}, {"11", "3"}, { "9", "6"}, { "8", "5"}, { "7", "6"} },
            { {"35", "0"}, {"23", "1"}, {"17", "2"}, {"14", "0"}, {"11", "4"}, {"10", "0"}, { "8", "6"}, { "7", "7"} },
            { {"35", "1"}, {"23", "2"}, {"17", "3"}, {"14", "1"}, {"11", "5"}, {"10", "1"}, { "8", "7"}, { "7", "8"} },
            { {"36", "0"}, {"24", "0"}, {"18", "0"}, {"14", "2"}, {"12", "0"}, {"10", "2"}, { "9", "0"}, { "8", "0"} },
            { {"36", "1"}, {"24", "1"}, {"18", "1"}, {"14", "3"}, {"12", "1"}, {"10", "3"}, { "9", "1"}, { "8", "1"} },
            { {"37", "0"}, {"24", "2"}, {"18", "2"}, {"14", "4"}, {"12", "2"}, {"10", "4"}, { "9", "2"}, { "8", "2"} },
            { {"37", "1"}, {"25", "0"}, {"18", "3"}, {"15", "0"}, {"12", "3"}, {"10", "5"}, { "9", "3"}, { "8", "3"} },
            { {"38", "0"}, {"25", "1"}, {"19", "0"}, {"15", "1"}, {"12", "4"}, {"10", "6"}, { "9", "4"}, { "8", "4"} },
            { {"38", "1"}, {"25", "2"}, {"19", "1"}, {"15", "2"}, {"12", "5"}, {"11", "0"}, { "9", "5"}, { "8", "5"} },
            { {"39", "0"}, {"26", "0"}, {"19", "2"}, {"15", "3"}, {"13", "0"}, {"11", "1"}, { "9", "6"}, { "8", "6"} },
            { {"39", "1"}, {"26", "1"}, {"19", "3"}, {"15", "4"}, {"13", "1"}, {"11", "2"}, { "9", "7"}, { "8", "7"} },
            { {"40", "0"}, {"26", "2"}, {"20", "0"}, {"16", "0"}, {"13", "2"}, {"11", "3"}, {"10", "0"}, { "8", "8"} },
            { {"40", "1"}, {"27", "0"}, {"20", "1"}, {"16", "1"}, {"13", "3"}, {"11", "4"}, {"10", "1"}, { "9", "0"} },
            { {"41", "0"}, {"27", "1"}, {"20", "2"}, {"16", "2"}, {"13", "4"}, {"11", "5"}, {"10", "2"}, { "9", "1"} },
            { {"41", "1"}, {"27", "2"}, {"20", "3"}, {"16", "3"}, {"13", "5"}, {"11", "6"}, {"10", "3"}, { "9", "2"} },
            { {"42", "0"}, {"28", "0"}, {"21", "0"}, {"16", "4"}, {"14", "0"}, {"12", "0"}, {"10", "4"}, { "9", "3"} },
            { {"42", "1"}, {"28", "1"}, {"21", "1"}, {"17", "0"}, {"14", "1"}, {"12", "1"}, {"10", "5"}, { "9", "4"} },
            { {"43", "0"}, {"28", "2"}, {"21", "2"}, {"17", "1"}, {"14", "2"}, {"12", "2"}, {"10", "6"}, { "9", "5"} },
            { {"43", "1"}, {"29", "0"}, {"21", "3"}, {"17", "2"}, {"14", "3"}, {"12", "3"}, {"10", "7"}, { "9", "6"} },
            { {"44", "0"}, {"29", "1"}, {"22", "0"}, {"17", "3"}, {"14", "4"}, {"12", "4"}, {"11", "0"}, { "9", "7"} },
            { {"44", "1"}, {"29", "2"}, {"22", "1"}, {"17", "4"}, {"14", "5"}, {"12", "5"}, {"11", "1"}, { "9", "8"} },
        };

        int X;

        if (Longitud(x) == 1)
            X = x[0] - 51;
        else
            X = (x[0] - 48) * 10 + (x[1] - 51);

        c_r = tabla[X][y[0] - 50];
    }

    return c_r;
}

string *TablaDivision(string x, char y) 
{
    return TablaDivision(x, string(1, y));
}

string Division(string a, string b)
{
    string division, c, m;
    
    int i = 0;
    int j = Longitud(b);

    string *c_r;
    string A = "";

    while (i < Longitud(a)) {

        if (Longitud(A) == 0)    
            A =  Extracto(a, i, j);
        else
            A += Extracto(a, i, 1);

        if (EsMayor(b, A)) A = Extracto(a, i, ++j);

        c_r = TablaDivision(Extracto(A, 0, 2), b[0]); 
        
        if (EsIgual(Extracto(A, 0, 2), string(1, b[0]))) {
        
            division += c_r[0]; A = c_r[1];

        } else {

            if (EsMayor(m = Multiplicacion(c = c_r[0], b), A)) 
            {
                c = Resta(c, "1");
                m = Multiplicacion(c, b);
            }

            A = Resta(A, m);

            division += c;
        }

        i = j++;
    }

    cout << division << " " << A;

    return "";
}

int main() {
    cout << Division("126", "3");
}
